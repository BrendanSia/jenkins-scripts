@Library("notification-scripts") _

pipeline {
    agent any
    environment {
        chatId = credentials('TelegramChatIdTest')
        botToken = credentials('TelegramBot')
        sqId = credentials('SonarQubeId')
        sqPw = credentials('SonarQubePw')
    }
    stages {
        stage('Clean Workspace') {
            steps {
                deleteDir()
            }
        }
        stage('Build & Install') {
            steps {
                script {
                    try {
                        checkout scmGit(branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/BrendanSia/ms-products.git']])
                        sh "mvn clean install"
                    } catch (Exception e) {
                        currentBuild.result = 'FAILURE'
                        env.failedStageName="Build & Install"
                        error("Failed in Build & Install stage")
                    }
                }
            }
        }
        stage('SonarQube analysis') {
            steps {
                script {
                    try {
                        withSonarQubeEnv(installationName: 'SQ1') {
                            sh "mvn clean package sonar:sonar"
                        }
                    } catch (Exception e) {
                        env.failedStageName = 'SonarQube analysis'
                        error("Failed in SonarQube analysis stage")
                    }
                }
            }
        }
        stage('Quality Gate') {
            steps {
                script {
                    def qg = waitForQualityGate()
                    if (qg.status != "OK") {
                        env.failedStageName = "Quality Gate"
                        error "Pipeline aborted due to quality gate coverage failure: ${qg.status}"
                    }
                }
            }
        }
    }
    post {
        success {
            script {
                def buildNumber = env.BUILD_NUMBER
                def failedStage = env.failedStageName
                
                postBuildAlert.alert("SUCCESS", buildNumber, failedStage, sqId, sqPw, chatId, botToken)
            }
        }
        
        failure {
            script {
                def buildNumber = env.BUILD_NUMBER
                def failedStage = env.failedStageName
                
                postBuildAlert.alert("FAILED", buildNumber, failedStage, sqId, sqPw, chatId, botToken)
            }
        }
    }
}