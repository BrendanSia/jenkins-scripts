import groovy.json.JsonSlurper

pipeline {
    agent any
    stages {
        stage('Clean Workspace') {
            steps {
                deleteDir()
            }
        }
        stage('Build & Install') {
            steps {
                script {
                    try {
                        checkout scmGit(branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/BrendanSia/ms-products.git']])
                        sh "mvn clean install"
                    } catch (Exception e) {
                        currentBuild.result = 'FAILURE'
                        env.failedStageName="Build & Install"
                        error("Failed in Build & Install stage")
                    }
                }
            }
        }
        stage('SonarQube analysis') {
            steps {
                script {
                    try {
                        withSonarQubeEnv(installationName: 'SQ1') {
                            sh "mvn clean package sonar:sonar"
                        }
                    } catch (Exception e) {
                        env.failedStageName = 'SonarQube analysis'
                        error("Failed in SonarQube analysis stage")
                    }
                }
            }
        }
        stage('Quality Gate') {
            steps {
                script {
                    def qg = waitForQualityGate()
                    if (qg.status != "OK") {
                        env.failedStageName = "Quality Gate"
                        error "Pipeline aborted due to quality gate coverage failure: ${qg.status}"
                    }
                }
            }
        }
    }
    post {
        success {
            script {
                def buildNumber = env.BUILD_NUMBER
                def buildDate = new Date()
                def failedStage = env.failedStageName
                
                def alertMessage = "Build Passed! ✅\n"
                alertMessage += "\n"
                alertMessage += "Build no: ${buildNumber}\n"
                alertMessage += "Date: ${buildDate.format('yyyy-MM-dd HH:mm:ss')}\n"
                
                sh "curl -X POST -H \"Content-Type: application/json\" -d '{\"chat_id\": \"-1002005133194\", \"text\": \"${alertMessage}\", \"disable_notification\": false}' \"https://api.telegram.org/bot7134798871:AAFpwT4nsKTfY19XFR4dapq3XQTpq0lQZFc/sendMessage\""
            }
        }
        
        failure {
            script {
                def buildNumber = env.BUILD_NUMBER
                def buildDate = new Date()
                def failedStage = env.failedStageName
                
                def alertMessage = "Build Failed! ❌\n"
                alertMessage += "\n"
                alertMessage += "Build no: ${buildNumber}\n"
                alertMessage += "Date: ${buildDate.format('yyyy-MM-dd HH:mm:ss')}\n"
                alertMessage += "\n"
                alertMessage += "Stage Failed: ${failedStage}\n"

                if (failedStage == "Quality Gate") {
                    def username = 'admin'
                    def password = 'Bs2024'
                    def authString = "${username}:${password}".bytes.encodeBase64().toString()

                    def response = httpRequest(
                        url: 'http://localhost:9000/api/qualitygates/project_status?projectKey=com.demo-project:brendan-sia&branch=main',
                        method: 'GET',
                        customHeaders: [[name: 'Authorization', value: "Basic ${authString}"]]
                    )
                    def jsonSlurper = new JsonSlurper()
                    def jsonData = jsonSlurper.parseText(response.content)
                      
                    def coverage = jsonData.projectStatus.conditions
                    alertMessage += "Details: \n"
                    coverage.each { condition ->
                        if (condition.metricKey == "coverage") {
                            alertMessage += "\t- ${condition.metricKey}: ${condition.actualValue}% | min: ${condition.errorThreshold}% \n"
                        } else {
                            alertMessage += "\t- ${condition.metricKey}: ${condition.actualValue}% | max: ${condition.errorThreshold}% \n"
                        }
                    }
                } else  {
                    alertMessage += "Please refer to logs sent via email for more information."
                }
                
                sh "curl -X POST -H \"Content-Type: application/json\" -d '{\"chat_id\": \"-1002005133194\", \"text\": \"${alertMessage}\", \"disable_notification\": false}' \"https://api.telegram.org/bot7134798871:AAFpwT4nsKTfY19XFR4dapq3XQTpq0lQZFc/sendMessage\""
            
                emailext(
                    subject : "Pipeline Build #${buildNumber} Failure",
                    body : """<p>Hi team,<br><br>The current build has failed at:<br>- Stage failed: ${failedStageName}<br>- Date: ${buildDate}<br><br>Logs are attached for more information.<br><br>Regards,<br>Paydaes Team</p>""",
                    attachLog : true,
                    compressLog : true,
                    from : '',
                    mimeType : 'text/html',
                    charset: 'UTF-8',
                    to: "sexybob12629@gmail.com"
                )
            }
        }
    }
}